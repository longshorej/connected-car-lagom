play.modules.enabled += com.lightbend.connectedcar.impl.GreetingModule

connected-car-lagom.cassandra.keyspace = connected_car_lagom

cassandra-journal.keyspace = ${connected-car-lagom.cassandra.keyspace}
cassandra-snapshot-store.keyspace = ${connected-car-lagom.cassandra.keyspace}
lagom.persistence.read-side.cassandra.keyspace = ${connected-car-lagom.cassandra.keyspace}


akka.loglevel = "DEBUG"
akka.log-config-on-start = "on"

# The properties below override Lagom default configuration with the recommended values for new projects.
#
# Lagom has not yet made these settings the defaults for backward-compatibility reasons.

# Prefer 'ddata' over 'persistence' to share cluster sharding state for new projects.
# See https://doc.akka.io/docs/akka/current/cluster-sharding.html#distributed-data-vs-persistence-mode
akka.cluster.sharding.state-store-mode = ddata

# Enable the serializer for akka.Done provided in Akka 2.5.8+ to avoid the use of Java serialization.
akka.actor.serialization-bindings {
  "akka.Done" = akka-misc
}

service-locator-dns {
  name-translators = [
    { "^_.+$"   = "$0" },
    { "^[^.]+$" = "_$0-chirper._tcp.marathon.mesos" },
    { "^.*$"    = "$0"}
  ]

  srv-translators = [
    { "^_(.+)-chirper[.]_tcp[.]marathon.mesos$" = "_$1-chirper._http.marathon.mesos" },
    { "^.*$"                                    = "$0" }
  ]
}

akka {

  discovery {

    method = marathon-api

    marathon-api {

      class = akka.discovery.marathon.MarathonApiSimpleServiceDiscovery

      # URL for getting list of apps from Marathon. Verified on OSS DC/OS 1.8, 1.9
      app-api-url = "http://marathon.mesos:8080/v2/apps"

      # The name of the akka management port - this cannot have underscores or dashes (env var name)
      app-port-name = "akkamgmthttp"

      # Used to find other apps running by Marathon. This will be passed as the label query string parameter
      # to the apps-api-url defined above.
      # `%s` will be replaced with the configured effective name, which defaults to the actor system name
      app-label-query = "ACTOR_SYSTEM_NAME==%s"
    }
  }

  management {

    cluster.bootstrap {

      # Configuration for the first phase of bootstraping, during which contact points are discovered
      # using the configured service discovery mechanism.
      contact-point-discovery {

        # Marathon API discovery uses effective-name when it's defined.
        #
        # Marathon API dicsovery uses this value to substitute to the query `app-label-query`
        #
        # It should match with application LABEL value declared in Marathon description.
        #
        effective-name= "connected-car-dummy-app-label"
      }
    }
  }
}
